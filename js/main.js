// Generated by CoffeeScript 1.8.0
(function() {
  var buildBoard, collapseCells, generateTile, getRow, mergeCells, move, printArray, randomCellIndices, randomInt, randomValue, showBoard;

  randomInt = function(x) {
    return Math.floor(Math.random() * x);
  };

  randomCellIndices = function() {
    return [randomInt(4), randomInt(4)];
  };

  randomValue = function() {
    var values;
    values = [2, 2, 2, 4];
    return values[randomInt(4)];
  };

  buildBoard = function() {
    return [0, 1, 2, 3].map(function() {
      return [0, 1, 2, 3].map((function() {
        return 0;
      }));
    });
  };

  generateTile = function(board) {
    var column, row, value, _ref;
    value = randomValue();
    _ref = randomCellIndices(), row = _ref[0], column = _ref[1];
    console.log("randomInt: " + row + " | " + column);
    if (board[row][column] === 0) {
      board[row][column] = value;
    } else {
      generateTile(board);
    }
    return console.log("generate tile");
  };

  move = function(board, direction) {
    var i, row, _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 3; i = ++_i) {
      if (direction === 'right') {
        row = getRow(i, board);
        row = mergeCells(row, direction);
        row = collapseCells(row, direction);
        _results.push(console.log(row));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  getRow = function(r, board) {
    var row;
    return row = [board[r][0], board[r][1], board[r][2], board[r][3]];
  };

  mergeCells = function(row, direction) {
    var a, b, _i, _j, _ref;
    if (direction === 'right') {
      for (a = _i = 3; _i > 0; a = --_i) {
        for (b = _j = _ref = a - 1; _ref <= 0 ? _j <= 0 : _j >= 0; b = _ref <= 0 ? ++_j : --_j) {
          if (row[a] === 0) {
            break;
          } else if (row[a] === row[b]) {
            row[a] *= 2;
            row[b] = 0;
            break;
          } else if (row[b] !== 0) {
            break;
          }
        }
      }
    }
    return row;
  };

  collapseCells = function(row, direction) {
    row = row.filter(function(x) {
      return x !== 0;
    });
    if (direction === 'right') {
      while (row.length < 4) {
        row.unshift(0);
      }
    }
    return row;
  };

  console.log(collapseCells([2, 0, 4, 0], 'right'));

  showBoard = function(board) {
    var col, row, _i, _results;
    _results = [];
    for (row = _i = 0; _i <= 3; row = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (col = _j = 0; _j <= 3; col = ++_j) {
          _results1.push($(".r" + row + ".c" + col + " > div").html(board[row][col]));
        }
        return _results1;
      })());
    }
    return _results;
  };

  printArray = function(array) {
    var row, _i, _len;
    console.log("-- Start --");
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      row = array[_i];
      console.log(row);
    }
    return console.log("-- End--");
  };

  $(function() {
    this.board = buildBoard();
    generateTile(this.board);
    generateTile(this.board);
    printArray(this.board);
    showBoard(this.board);
    return $('body').keydown((function(_this) {
      return function(e) {
        var direction, key, keys;
        e.preventDefault();
        key = e.which;
        keys = [37, 38, 39, 40];
        if ((keys.indexOf(key)) > -1) {
          console.log("key: ", key);
          direction = (function() {
            switch (key) {
              case 37:
                return 'left';
              case 38:
                return 'up';
              case 39:
                return 'right';
              case 40:
                return 'down';
            }
          })();
          console.log("direction: ", direction);
          return move(_this.board, direction);
        } else {

        }
      };
    })(this));
  });

}).call(this);

//# sourceMappingURL=main.js.map
